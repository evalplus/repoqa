# SPDX-FileCopyrightText: (c) 2024 EvalPlus Team
#
# SPDX-License-Identifier: Apache-2.0

import json
import os
import subprocess

import git
import tempdir
from fire import Fire
from tqdm.auto import tqdm


# dataset_path is the dataset generated by dataset_ensemble_clone.py
def main(dataset_path: str):
    with open(dataset_path) as f:
        lists = json.load(f)

    repos = lists["python"]
    for repo in tqdm(repos):
        repo_name = repo["repo"]
        commit_sha = repo["commit_sha"]
        entrypoint = repo["entrypoint_path"]
        content = repo["content"]

        print(f"Visiting https://github.com/{repo_name}/tree/{commit_sha}")

        if repo.get("dependency"):
            print(f"Skipping {repo_name} as it already has dependency field.")
            continue

        with tempdir.TempDir() as temp_dir:
            gh_repo = git.Repo.clone_from(
                f"https://github.com/{repo_name}.git",
                temp_dir,
            )
            gh_repo.git.checkout(commit_sha)
            command_list = f"pydeps {entrypoint} --show-deps --no-show".split()
            # cd `temp_dir`` and capture the output json
            output = subprocess.check_output(command_list, cwd=temp_dir)
            dependencies = json.loads(output)

            output_dependency = {}
            mod2path = {}

            abs_prefix = os.path.join(temp_dir, entrypoint)
            for mod, v in dependencies.items():
                if v["path"] and v["path"].startswith(abs_prefix):
                    mod2path[mod] = v["path"]

            for mod, v in dependencies.items():
                if v["path"] and v["path"].startswith(abs_prefix):
                    if "imports" in v:
                        relative_path = os.path.relpath(v["path"], temp_dir)
                        output_dependency[relative_path] = [
                            os.path.relpath(mod2path[imp], temp_dir)
                            for imp in v["imports"]
                            if imp in mod2path
                        ]

            for path in output_dependency:
                assert path in content, f"Unknown path {path}"

            for path in content:
                if path not in output_dependency:
                    output_dependency[path] = []

            assert output_dependency, "Empty output_dependency"

            repo["dependency"] = output_dependency

    with open(dataset_path, "w") as f_out:
        json.dump(lists, f_out)


if __name__ == "__main__":
    Fire(main)
